members_sample_graph <- igraph::graph_from_data_frame(members_sample_df, directed = FALSE)
friends_of_friends_df <-
linkedinAssignment::convert_fof_igraph_to_df(members_sample_graph,
igraph::ego(members_sample_graph, order = 2,
mindist = 2, mode = "out"))
friends_of_friends_df <-
friends_of_friends_df %>%
dplyr::mutate(count_common_connections =
purrr::map2_int(member_id, friend_of_friend,
calc_common_conns, members_df))
return(friends_of_friends_df %>%
arrange(count_common_connections) %>%
top_n(10, count_common_connections))
}
getwd()
get_common_connections <- function(n, seed) {
set.seed(seed)
#TODO: Add this function to package, I can't get the package to export it properly!
calc_common_conns <- function(member, f_of_f, member_conns) {
sum(member_conns[member_id == member]$connected_member_id %in%
member_conns[member_id == f_of_f]$connected_member_id,
na.rm = TRUE)
}
members_df <-
readr::read_csv("../dev/linkedinAssignment/linkedin_data/common_connection_200k.csv")
members_df <- data.table::as.data.table(members_df)
data.table::setkey(members_df, member_id)
members_sample_df <- dplyr::sample_n(members_df, sample_size)
members_sample_graph <- igraph::graph_from_data_frame(members_sample_df, directed = FALSE)
friends_of_friends_df <-
linkedinAssignment::convert_fof_igraph_to_df(members_sample_graph,
igraph::ego(members_sample_graph, order = 2,
mindist = 2, mode = "out"))
friends_of_friends_df <-
friends_of_friends_df %>%
dplyr::mutate(count_common_connections =
purrr::map2_int(member_id, friend_of_friend,
calc_common_conns, members_df))
return(friends_of_friends_df %>%
arrange(count_common_connections) %>%
top_n(10, count_common_connections))
}
get_common_connections(1000, 314)
get_common_connections <- function(sample_size, seed) {
set.seed(seed)
#TODO: Add this function to package, I can't get the package to export it properly!
calc_common_conns <- function(member, f_of_f, member_conns) {
sum(member_conns[member_id == member]$connected_member_id %in%
member_conns[member_id == f_of_f]$connected_member_id,
na.rm = TRUE)
}
members_df <-
readr::read_csv("../dev/linkedinAssignment/linkedin_data/common_connection_200k.csv")
members_df <- data.table::as.data.table(members_df)
data.table::setkey(members_df, member_id)
members_sample_df <- dplyr::sample_n(members_df, sample_size)
members_sample_graph <- igraph::graph_from_data_frame(members_sample_df, directed = FALSE)
friends_of_friends_df <-
linkedinAssignment::convert_fof_igraph_to_df(members_sample_graph,
igraph::ego(members_sample_graph, order = 2,
mindist = 2, mode = "out"))
friends_of_friends_df <-
friends_of_friends_df %>%
dplyr::mutate(count_common_connections =
purrr::map2_int(member_id, friend_of_friend,
calc_common_conns, members_df))
return(friends_of_friends_df %>%
arrange(count_common_connections) %>%
top_n(10, count_common_connections))
}
get_common_connections(1000, 314)
runs_2_by_500k$results
runs_2_by_500k$results[[1]] %>% knitr::kable()
runs_2_by_500k$results[[1]]$member_id == runs_2_by_500k$results[[2]]$member_id
library(fastmatch)
library(microbenchmark)
WORDS <- read.table("https://dotnetperls-controls.googlecode.com/files/enable1.txt",
stringsAsFactors = FALSE)[[1]]
words_factor <- as.factor(WORDS)
# generate 100 sentences of between 5 and 15 words:
SENTENCES <- lapply(c(1:100), sample, x = WORDS, size = sample(c(5:15), size = 1))
bench_fun <- function(fun)
lapply(SENTENCES, fun)
# poster's slow solution:
hg_convert <- function(sentence){
return(which(WORDS %in% sentence))
}
jw_convert_match <- function(sentence) {
match(sentence, WORDS)
}
jw_convert_match_factor <- function(sentence) {
match(sentence, words_factor)
}
jw_convert_fastmatch <- function(sentence) {
fmatch(sentence, WORDS)
}
jw_convert_fastmatch_factor <- function(sentence) {
fmatch(sentence, words_factor)
}
message("starting benchmark one")
print(microbenchmark(bench_fun(hg_convert),
bench_fun(jw_convert_match),
bench_fun(jw_convert_match_factor),
bench_fun(jw_convert_fastmatch),
bench_fun(jw_convert_fastmatch_factor),
times = 10))
# now again with big samples
# generating the SENTENCES is quite slow...
SENTENCES <- lapply(c(1:1e6), sample, x = WORDS, size = sample(c(5:15), size = 1))
message("starting benchmark two, compare with factor vs vector of words")
print(microbenchmark(bench_fun(jw_convert_fastmatch),
bench_fun(jw_convert_fastmatch_factor),
times = 10))
install.packages("microbenchmark")
library(fastmatch)
library(microbenchmark)
install.packages("fastmatch")
WORDS <- read.table("https://dotnetperls-controls.googlecode.com/files/enable1.txt",
stringsAsFactors = FALSE)[[1]]
WORDS <- read.table("https://github.com/dolph/dictionary/blob/master/enable1.txt",
stringsAsFactors = FALSE)[[1]]
WORDS <- read.table("https://raw.githubusercontent.com/dolph/dictionary/master/enable1.txt",
stringsAsFactors = FALSE)[[1]]
SENTENCES <- lapply(c(1:100), sample, x = WORDS, size = sample(c(5:15), size = 1))
bench_fun <- function(fun)
lapply(SENTENCES, fun)
# poster's slow solution:
hg_convert <- function(sentence){
return(which(WORDS %in% sentence))
}
jw_convert_match <- function(sentence) {
match(sentence, WORDS)
}
jw_convert_match_factor <- function(sentence) {
match(sentence, words_factor)
}
message("starting benchmark one")
print(microbenchmark(bench_fun(hg_convert),
bench_fun(jw_convert_match),
bench_fun(jw_convert_match_factor),
bench_fun(jw_convert_fastmatch),
bench_fun(jw_convert_fastmatch_factor),
times = 10))
library(fastmatch)
library(microbenchmark)
message("starting benchmark one")
print(microbenchmark(bench_fun(hg_convert),
bench_fun(jw_convert_match),
bench_fun(jw_convert_match_factor),
bench_fun(jw_convert_fastmatch),
bench_fun(jw_convert_fastmatch_factor),
times = 10))
jw_convert_fastmatch_factor <- function(sentence) {
fmatch(sentence, words_factor)
}
message("starting benchmark one")
print(microbenchmark(bench_fun(hg_convert),
bench_fun(jw_convert_match),
bench_fun(jw_convert_match_factor),
bench_fun(jw_convert_fastmatch),
bench_fun(jw_convert_fastmatch_factor),
times = 10))
library(fastmatch)
library(microbenchmark)
WORDS <- read.table("https://raw.githubusercontent.com/dolph/dictionary/master/enable1.txt",
stringsAsFactors = FALSE)[[1]]
words_factor <- as.factor(WORDS)
# generate 100 sentences of between 5 and 15 words:
SENTENCES <- lapply(c(1:100), sample, x = WORDS, size = sample(c(5:15), size = 1))
bench_fun <- function(fun)
lapply(SENTENCES, fun)
# poster's slow solution:
hg_convert <- function(sentence){
return(which(WORDS %in% sentence))
}
jw_convert_match <- function(sentence) {
match(sentence, WORDS)
}
jw_convert_match_factor <- function(sentence) {
match(sentence, words_factor)
}
jw_convert_fastmatch <- function(sentence) {
fmatch(sentence, WORDS)
}
jw_convert_fastmatch_factor <- function(sentence) {
fmatch(sentence, words_factor)
}
message("starting benchmark one")
print(microbenchmark(bench_fun(hg_convert),
bench_fun(jw_convert_match),
bench_fun(jw_convert_match_factor),
bench_fun(jw_convert_fastmatch),
bench_fun(jw_convert_fastmatch_factor),
times = 10))
1
1
getwd()
setwd("../")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
if(!interactive()){
knitr::opts_knit$set(root.dir = "..")
}
# Chunk 2: libraries
library(tidyverse)
library(broom)
# Chunk 3: functions
growth <- function(x) {(x / lag(x)) - 1}
# Replacing non finite growth values with 0, 0 is a close enough approximate
# when summing. Mean/medians are not being used here.
safe_growth <- function(x) {ifelse(is.finite(growth(x)), growth(x), 0)}
abs_growth <- function(x) {x - lag(x)}
clean_names <- function(x) {tolower(stringr::str_replace(x, " ", "_"))}
# Chunk 4: import & clean 1
primary_energy <-
readr::read_csv("./data/raw/primary_energy.csv") %>%
rename_all(clean_names) %>%
select(-flag_codes, -frequency, -subject, -indicator) %>%
filter(measure == "MLN_TOE",
!(location %in% c("G20", "EU28", "OECD", "OEU", "WLD"))) %>%
rename(country_iso3 = location, year = time,
million_tonnes_equivalent = value) %>%
select(-measure)
# Country codes retrieved from: http://www.oecd.org/migration/mig/34107835.xls
country_codes <- readr::read_csv("https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv") %>%
rename(alpha_3 = `alpha-3`) %>%
select(name, alpha_3)
primary_energy_clean <-
primary_energy %>%
filter(year %in% 1990:2015) %>%
left_join(country_codes, by = c("country_iso3" = "alpha_3")) %>%
rename(country = name)
# Chunk 5: import & clean 2
renewable_energy <-
readr::read_csv("./data/raw/renewable_primary_energy.csv") %>%
rename_all(clean_names)
renewable_energy %>% select_if(is.character) %>% map(unique)
# Chunk 6: import & clean 3
renewable_energy <-
renewable_energy %>%
select(-flag_codes, -frequency, -subject, -indicator) %>%
filter(measure == "KTOE",
!(location %in% c("G20", "EU28", "OECD", "OEU", "WLD"))) %>%
rename(country_iso3 = location, year = time,
million_tonnes_equivalent = value) %>%
select(-measure)  %>%
mutate(million_tonnes_equivalent = million_tonnes_equivalent / 1000)
renewable_energy_clean<-
renewable_energy %>%
filter(year %in% 1990:2015) %>%
left_join(country_codes, by = c("country_iso3" = "alpha_3")) %>%
rename(country = name)
# Chunk 7
renewable_energy_clean %>% select(country) %>% is.na() %>%
table() %>% as_tibble() %>%  knitr::kable(caption = "Is country NA?")
# Chunk 8: exploration 1
primary_energy %>%
ggplot(aes(year, million_tonnes_equivalent, fill = country_iso3)) +
geom_bar(stat = "identity") +
blorg::blog_theme +
theme(legend.position = "none")
# Chunk 9: exploration 2
primary_energy_clean %>%
filter(stringr::str_detect(country, "China|United States|India")) %>%
ggplot(aes(year, million_tonnes_equivalent, fill = country)) +
geom_bar(stat = "identity") +
blorg::blog_theme
is.na(primary_energy$million_tonnes_equivalent) %>% table() %>%
knitr::kable(caption = "Missing Data From Entire Dataset")
is.na(primary_energy_clean$million_tonnes_equivalent) %>% table() %>%
knitr::kable(caption = "Missing Data From 1990 Onwards")
primary_energy_clean %>%
filter(is.na(million_tonnes_equivalent)) %>% select(country) %>%
unique() %>% knitr::kable(caption = "Countries with missing data between 1990 - 2015")
# Chunk 10: exploration 3
renewable_energy %>%
ggplot(aes(year, million_tonnes_equivalent, fill = country_iso3)) +
geom_bar(stat = "identity") +
blorg::blog_theme +
theme(legend.position = "none")
is.na(renewable_energy$million_tonnes_equivalent) %>% table() %>%
knitr::kable(caption = "Missing Data From Entire Dataset")
is.na(renewable_energy_clean$million_tonnes_equivalent) %>% table() %>%
knitr::kable(caption = "Missing Data From 1990 Onwards")
renewable_energy_clean %>%
filter(is.na(million_tonnes_equivalent)) %>% select(country) %>%
unique() %>% knitr::kable(caption = "Countries with missing data between 1990 - 2015")
# Chunk 11: enrichment
primary_energy_enriched <-
primary_energy_clean %>%
rename(total_mtoe = million_tonnes_equivalent) %>%
left_join((renewable_energy_clean %>%
select(year, country, million_tonnes_equivalent)),
by = c("country", "year")) %>%
rename(renewables_mtoe = million_tonnes_equivalent) %>%
select(-country_iso3) %>%
gather(energy_source, mtoe, total_mtoe, renewables_mtoe)
# Anything with "mtoe" in title will have growth calculated.
# Adding more primary energy sources to dataset should "just work"
primary_energy_enriched <-
primary_energy_enriched %>%
group_by(country, energy_source) %>%
mutate_at(vars(contains("mtoe")),
funs(growth = safe_growth, abs_growth = abs_growth)) %>%
ungroup()
saveRDS(primary_energy_enriched,
"./data/processed/primary_energy_enriched.rds")
primary_energy
readr::read_csv("./data/raw/primary_energy.csv")
getwd
getwd)
getwd()
setwd("./dev/Data_Constitutional/")
setwd("./5. New Renewables vs Primary Energy Growth/")
git status
primary_energy <-
readr::read_csv("./data/raw/primary_energy.csv") %>%
rename_all(clean_names) %>%
select(-flag_codes, -frequency, -subject, -indicator) %>%
filter(measure == "MLN_TOE",
!(location %in% c("G20", "EU28", "OECD", "OEU", "WLD"))) %>%
rename(country_iso3 = location, year = time,
million_tonnes_equivalent = value) %>%
select(-measure)
# Country codes retrieved from: http://www.oecd.org/migration/mig/34107835.xls
country_codes <- readr::read_csv("https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv") %>%
rename(alpha_3 = `alpha-3`) %>%
select(name, alpha_3)
primary_energy_clean <-
primary_energy %>%
filter(year %in% 1990:2015) %>%
left_join(country_codes, by = c("country_iso3" = "alpha_3")) %>%
rename(country = name)
renewable_energy <-
readr::read_csv("./data/raw/renewable_primary_energy.csv") %>%
rename_all(clean_names)
renewable_energy %>% select_if(is.character) %>% map(unique)
renewable_energy <-
renewable_energy %>%
select(-flag_codes, -frequency, -subject, -indicator) %>%
filter(measure == "KTOE",
!(location %in% c("G20", "EU28", "OECD", "OEU", "WLD"))) %>%
rename(country_iso3 = location, year = time,
million_tonnes_equivalent = value) %>%
select(-measure)  %>%
mutate(million_tonnes_equivalent = million_tonnes_equivalent / 1000)
renewable_energy_clean<-
renewable_energy %>%
filter(year %in% 1990:2015) %>%
left_join(country_codes, by = c("country_iso3" = "alpha_3")) %>%
rename(country = name)
renewable_energy_clean %>% select(country) %>% is.na() %>%
table() %>% as_tibble() %>%  knitr::kable(caption = "Is country NA?")
primary_energy %>%
ggplot(aes(year, million_tonnes_equivalent, fill = country_iso3)) +
geom_bar(stat = "identity") +
blorg::blog_theme +
theme(legend.position = "none")
devtools::install_github("cormac85/blorg")
devtools::install_github("cormac85/blorg")
devtools::install_github("cormac85/Data_Constitutional/Utilities/blorg")
primary_energy_enriched <-
primary_energy_clean %>%
rename(total_mtoe = million_tonnes_equivalent) %>%
left_join((renewable_energy_clean %>%
select(year, country, million_tonnes_equivalent)),
by = c("country", "year")) %>%
rename(renewables_mtoe = million_tonnes_equivalent) %>%
select(-country_iso3) %>%
gather(energy_source, mtoe, total_mtoe, renewables_mtoe)
primary_energy_enriched <-
primary_energy_clean %>%
rename(total_mtoe = million_tonnes_equivalent) %>%
left_join((renewable_energy_clean %>%
select(year, country, million_tonnes_equivalent)),
by = c("country", "year")) %>%
rename(renewables_mtoe = million_tonnes_equivalent) %>%
select(-country_iso3) %>%
gather(energy_source, mtoe, total_mtoe, renewables_mtoe)
# Anything with "mtoe" in title will have growth calculated.
# Adding more primary energy sources to dataset should "just work"
primary_energy_enriched <-
primary_energy_enriched %>%
group_by(country, energy_source) %>%
mutate_at(vars(contains("mtoe")),
funs(growth = safe_growth, abs_growth = abs_growth)) %>%
ungroup()
saveRDS(primary_energy_enriched,
"./data/processed/primary_energy_enriched.rds")
country_energy_summary <-
primary_energy_enriched %>%
group_by(country, energy_source) %>%
summarise_at(vars(contains("mtoe")),
funs(abs_growth = sum(abs_growth, na.rm = TRUE),
growth_1990_2015 =
ifelse(is.finite(sum(abs_growth, na.rm = TRUE) /
first(mtoe)),
sum(abs_growth, na.rm = TRUE) / first(mtoe),
NA),
mtoe_1990 = first,
mtoe_2015 = last))
country_summary %>%
ggplot(aes_(~forcats::fct_reorder(country, abs_growth),
as.name(plot_var), fill = ~energy_source,
group = ~energy_source)) +
geom_bar(stat = "identity") +
blorg::blog_theme +
scale_fill_manual(values = blorg::blog_palette) +
facet_wrap(~energy_source, ncol = 1, scales = "free")
yearly_energy_summary <-
primary_energy_enriched %>%
group_by(year, energy_source) %>%
summarise_at(vars(contains("mtoe")),
funs(abs_growth = sum(abs_growth, na.rm = TRUE),
total_mtoe = sum(mtoe, na.rm = TRUE))) %>%
ungroup() %>%
group_by(energy_source) %>%
# Calculate growth % AFTER absolute growth calculated
mutate(growth = safe_growth(total_mtoe)) %>%
ungroup()
plot_yearly_summary <- function(yearly_summary, plot_var){
yearly_summary %>%
ggplot(aes_(~year, as.name(plot_var), colour = ~energy_source,
group = ~energy_source)) +
geom_line(size = 1) +
blorg::blog_theme +
scale_color_manual(values = blorg::blog_palette)
}
country_energy_summary <-
primary_energy_enriched %>%
group_by(country, energy_source) %>%
summarise_at(vars(contains("mtoe")),
funs(abs_growth = sum(abs_growth, na.rm = TRUE),
growth_1990_2015 =
ifelse(is.finite(sum(abs_growth, na.rm = TRUE) /
first(mtoe)),
sum(abs_growth, na.rm = TRUE) / first(mtoe),
NA),
mtoe_1990 = first,
mtoe_2015 = last))
country_summary %>%
ggplot(aes_(~forcats::fct_reorder(country, abs_growth),
as.name(plot_var), fill = ~energy_source,
group = ~energy_source)) +
geom_bar(stat = "identity") +
blorg::blog_theme +
scale_fill_manual(values = blorg::blog_palette) +
facet_wrap(~energy_source, ncol = 1, scales = "free")
country_summary %>%
ggplot(aes_(~forcats::fct_reorder(country, growth_1990_2015),
as.name(plot_var), fill = ~energy_source,
group = ~energy_source)) +
geom_bar(stat = "identity") +
blorg::blog_theme +
scale_fill_manual(values = blorg::blog_palette) +
facet_wrap(~energy_source, ncol = 1, scales = "free")
plot_country_summary_abs_growth <- function(country_summary, plot_var){
country_summary %>%
ggplot(aes_(~forcats::fct_reorder(country, abs_growth),
as.name(plot_var), fill = ~energy_source,
group = ~energy_source)) +
geom_bar(stat = "identity") +
blorg::blog_theme +
scale_fill_manual(values = blorg::blog_palette) +
facet_wrap(~energy_source, ncol = 1, scales = "free")
}
plot_country_summary_growth <- function(country_summary, plot_var){
country_summary %>%
ggplot(aes_(~forcats::fct_reorder(country, growth_1990_2015),
as.name(plot_var), fill = ~energy_source,
group = ~energy_source)) +
geom_bar(stat = "identity") +
blorg::blog_theme +
scale_fill_manual(values = blorg::blog_palette) +
facet_wrap(~energy_source, ncol = 1, scales = "free")
}
plot_country_summary_abs_growth(country_energy_summary %>% ungroup() %>%
filter(energy_source == "total_mtoe") %>%
top_n(10, abs_growth),
"abs_growth")
plot_country_summary_abs_growth(country_energy_summary %>% ungroup() %>%
filter(energy_source == "renewables_mtoe") %>%
top_n(10, abs_growth),
"abs_growth")
plot_country_summary_growth(country_energy_summary %>% ungroup() %>%
filter(energy_source == "total_mtoe") %>%
top_n(10, growth_1990_2015),
"growth_1990_2015")
saveRDS(yearly_energy_summary,
"./data/processed/yearly_energy_summary.rds")
saveRDS(country_energy_summary,
"./data/processed/country_energy_summary.rds")
yearly_energy_summary %>%
ggplot(aes(year, total_mtoe, group = energy_source,
colour = energy_source)) +
geom_line(size = 1.2) +
blorg::blog_theme +
scale_color_manual(values = blorg::blog_palette)
yearly_energy_summary %>%
ggplot(aes(year, abs_growth, group = energy_source,
colour = energy_source)) +
geom_line(size = 1.2) +
blorg::blog_theme +
scale_color_manual(values = blorg::blog_palette)
primary_energy_enriched %>%
filter(year == 2015) %>%
select(-growth, -abs_growth) %>%
spread(energy_source, mtoe) %>%
mutate(renewables_percentage = (100 * renewables_mtoe) / total_mtoe) %>%
arrange(desc(renewables_percentage)) %>%
top_n(10, renewables_percentage) %>%
knitr::kable(caption = "Primary Renewable Energy as % of Total Primary Energy")
